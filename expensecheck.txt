import java.sql.*;
import java.util.Scanner;

public class BankingApplication {

    // Method to initialize the database
    public static void initializeDatabase() {
        try (Connection conn = DriverManager.getConnection("jdbc:sqlite:banking.db")) {
            if (conn != null) {
                String createAccountTable = "CREATE TABLE IF NOT EXISTS accounts (" +
                        "id INTEGER PRIMARY KEY AUTOINCREMENT, " +
                        "name TEXT, " +
                        "balance REAL DEFAULT 0.0" +
                        ");";

                String createTransactionTable = "CREATE TABLE IF NOT EXISTS transactions (" +
                        "id INTEGER PRIMARY KEY AUTOINCREMENT, " +
                        "account_id INTEGER, " +
                        "type TEXT, " +
                        "amount REAL, " +
                        "date TEXT, " +
                        "FOREIGN KEY(account_id) REFERENCES accounts(id)" +
                        ");";

                Statement stmt = conn.createStatement();
                stmt.execute(createAccountTable);
                stmt.execute(createTransactionTable);

                System.out.println("Database initialized successfully.");
            }
        } catch (SQLException e) {
            System.out.println("Error initializing database: " + e.getMessage());
        }
    }

    // Method to create a new account
    public static void createAccount(String name) {
        try (Connection conn = DriverManager.getConnection("jdbc:sqlite:banking.db")) {
            String insertAccount = "INSERT INTO accounts (name) VALUES (?);";
            PreparedStatement pstmt = conn.prepareStatement(insertAccount);
            pstmt.setString(1, name);
            pstmt.executeUpdate();
            System.out.println("Account created successfully for " + name + ".");
        } catch (SQLException e) {
            System.out.println("Error creating account: " + e.getMessage());
        }
    }

    // Method to check balance
    public static void checkBalance(int accountId) {
        try (Connection conn = DriverManager.getConnection("jdbc:sqlite:banking.db")) {
            String selectBalance = "SELECT balance FROM accounts WHERE id = ?;";
            PreparedStatement pstmt = conn.prepareStatement(selectBalance);
            pstmt.setInt(1, accountId);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                System.out.println("Current balance: " + rs.getDouble("balance"));
            } else {
                System.out.println("Account not found.");
            }
        } catch (SQLException e) {
            System.out.println("Error checking balance: " + e.getMessage());
        }
    }

    // Method to deposit money
    public static void deposit(int accountId, double amount) {
        try (Connection conn = DriverManager.getConnection("jdbc:sqlite:banking.db")) {
            conn.setAutoCommit(false);

            String updateBalance = "UPDATE accounts SET balance = balance + ? WHERE id = ?;";
            PreparedStatement pstmt1 = conn.prepareStatement(updateBalance);
            pstmt1.setDouble(1, amount);
            pstmt1.setInt(2, accountId);
            int rowsUpdated = pstmt1.executeUpdate();

            if (rowsUpdated == 1) {
                String insertTransaction = "INSERT INTO transactions (account_id, type, amount, date) VALUES (?, ?, datetime('now'));";
                PreparedStatement pstmt2 = conn.prepareStatement(insertTransaction);
                pstmt2.setInt(1, accountId);
                pstmt2.setString(2, "Deposit");
                pstmt2.setDouble(3, amount);
                pstmt2.executeUpdate();

                conn.commit();
                System.out.println("Deposited " + amount + " successfully.");
            } else {
                System.out.println("Account not found.");
            }
        } catch (SQLException e) {
            System.out.println("Error depositing money: " + e.getMessage());
        }
    }

    // Method to withdraw money
    public static void withdraw(int accountId, double amount) {
        try (Connection conn = DriverManager.getConnection("jdbc:sqlite:banking.db")) {
            conn.setAutoCommit(false);

            String checkBalance = "SELECT balance FROM accounts WHERE id = ?;";
            PreparedStatement pstmt1 = conn.prepareStatement(checkBalance);
            pstmt1.setInt(1, accountId);
            ResultSet rs = pstmt1.executeQuery();

            if (rs.next()) {
                double currentBalance = rs.getDouble("balance");
                if (currentBalance >= amount) {
                    String updateBalance = "UPDATE accounts SET balance = balance - ? WHERE id = ?;";
                    PreparedStatement pstmt2 = conn.prepareStatement(updateBalance);
                    pstmt2.setDouble(1, amount);
                    pstmt2.setInt(2, accountId);
                    pstmt2.executeUpdate();

                    String insertTransaction = "INSERT INTO transactions (account_id, type, amount, date) VALUES (?, ?, datetime('now'));";
                    PreparedStatement pstmt3 = conn.prepareStatement(insertTransaction);
                    pstmt3.setInt(1, accountId);
                    pstmt3.setString(2, "Withdrawal");
                    pstmt3.setDouble(3, amount);
                    pstmt3.executeUpdate();

                    conn.commit();
                    System.out.println("Withdrew " + amount + " successfully.");
                } else {
                    System.out.println("Insufficient balance.");
                }
            } else {
                System.out.println("Account not found.");
            }
        } catch (SQLException e) {
            System.out.println("Error withdrawing money: " + e.getMessage());
        }
    }

    // Method to view transaction history
    public static void viewTransactions(int accountId) {
        try (Connection conn = DriverManager.getConnection("jdbc:sqlite:banking.db")) {
            String selectTransactions = "SELECT * FROM transactions WHERE account_id = ?;";
            PreparedStatement pstmt = conn.prepareStatement(selectTransactions);
            pstmt.setInt(1, accountId);
            ResultSet rs = pstmt.executeQuery();

            System.out.println("ID | Type | Amount | Date");
            while (rs.next()) {
                System.out.println(rs.getInt("id") + " | " +
                        rs.getString("type") + " | " +
                        rs.getDouble("amount") + " | " +
                        rs.getString("date"));
            }
        } catch (SQLException e) {
            System.out.println("Error viewing transactions: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        initializeDatabase();

        while (true) {
            System.out.println("\nMenu:");
            System.out.println("1. Create Account");
            System.out.println("2. Check Balance");
            System.out.println("3. Deposit");
            System.out.println("4. Withdraw");
            System.out.println("5. View Transactions");
            System.out.println("6. Exit");
            System.out.print("Choose an option: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter your name: ");
                    String name = scanner.nextLine();
                    createAccount(name);
                    break;
                case 2:
                    System.out.print("Enter account ID: ");
                    int accountId = scanner.nextInt();
                    checkBalance(accountId);
                    break;
                case 3:
                    System.out.print("Enter account ID: ");
                    accountId = scanner.nextInt();
                    System.out.print("Enter amount to deposit: ");
                    double depositAmount = scanner.nextDouble();
                    deposit(accountId, depositAmount);
                    break;
                case 4:
                    System.out.print("Enter account ID: ");
                    accountId = scanner.nextInt();
                    System.out.print("Enter amount to withdraw: ");
                    double withdrawAmount = scanner.nextDouble();
                    withdraw(accountId, withdrawAmount);
                    break;
                case 5:
                    System.out.print("Enter account ID: ");
                    accountId = scanner.nextInt();
                    viewTransactions(accountId);
                    break;
                case 6:
                    System.out.println("Exiting application. Goodbye!");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }
}
CREATE TABLE accounts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    balance REAL NOT NULL
);

CREATE TABLE expenses (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    amount REAL NOT NULL,
    category TEXT NOT NULL,
    date TEXT NOT NULL,
    description TEXT,
    account_id INTEGER,
    FOREIGN KEY(account_id) REFERENCES accounts(id)
);